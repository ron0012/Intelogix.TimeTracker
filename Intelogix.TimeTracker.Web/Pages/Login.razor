@page "/login"
@layout LoginLayout




<MudText Typo="Typo.h4" GutterBottom="true">Intelogix Login</MudText>
<MudTextField T="string" @bind-Value="@UserName" Label="User Name" Variant="Variant.Outlined" Class="my-6"></MudTextField>

<MudTextField @bind-Value="@Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />

<br/>
<br/>
<MudButton Disabled="@IsDisabled" Variant="Variant.Filled" Color="Color.Primary" OnClick="SignInAsync" Size="Size.Large" FullWidth="true">Sign In</MudButton>


@code {
    bool IsDisabled = false;
    string Password { get; set; } = "P4ssw0rd";
    string UserName { get; set; } = "Admin";
    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    protected async override Task OnInitializedAsync()
    {
        if (await AuthService.IsAuthenticatedAsync())
        {
            NavigationManager.NavigateTo("/");
        }
    }
    private async Task SignInAsync()
    {
        IsDisabled = true;
        await AuthService.SignInAsync(UserName,Password);
        await DialogService.ShowMessageBox(
     "Login Failed",
     (MarkupString)$"<h3 class='text-warning'><b>Login Failed</b></h3><br/><p>Invalid username or password</b> login failed!</p>",
     yesText: "Ok");
        IsDisabled = false;
    }

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}